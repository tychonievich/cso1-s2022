Special Dates:
  Courses begin: 2022-01-19
  Courses end: 2022-05-03
  Add deadline: 2022-02-02
  Drop deadline: 2022-03-02
  Withdraw deadline: 2022-03-23
  Spring recess:
    start: 2022-03-05
    end: 2022-03-13
  Final exams:
    CS2130-001: 2022-05-09 09:00:00
    CS2130-002: 2022-05-09 14:00:00

meta:
  timezone: America/New_York
  name: CSO1
  home: https://kytos.cs.virginia.edu/cso1/
  lecture:
    days: [Monday, Wednesday, Friday]
    sections:
      CS2130-001:
        start: 13:00:00
        duration: 50
        location: Nau 101
      CS2130-002:
        start: 12:00:00
        duration: 50
        location: Olsson 120
  lab:
    days: [Thursday]
    sections:
      CS2130-101:
        start: 17:00:00
        duration: 75
        location: Rice 130
      CS2130-102:
        start: 18:30:00
        duration: 75
        location: Rice 130

lectures:
    - welcome
    - Boolean algebra
    - binary arithmetic
    - binary arithmetic

    - gates, wires, bitwise
    - mux, demux, adder
    - clocks
    - other hardware

    - flex day
    - fetch-decode-execute
    - fetch-decode-execute
    - writing machine code
    - writing machine code

    - [addressing modes, endianness]
    - [adjacency and pointers, back doors]
    - review 
    
    - [assembly, x86-64]
    - [x86-64, the stack]

    - [debugger demo, guest instructor]
    - Class canceled
    - compilation
    - C introduction

    - C introduction
    - C introduction
    - C introduction
    - C introduction
    - global, stack, heap
    - malloc and free
    - [memory errors, malloc examples]

    - malloc examples
    - review
    
    - [string.h, C std library conventions]
    - string.h
    - stdio.h and varargs
    - stdio.h and varargs
    - unistd.h and so on

    - buffer overrun; reporting exploits
    - function pointers
    - defensive programming

    - languages safer than C
    - ask me anything
    
    - review


labs: 
    - shell
    - git and information theory
    - hex editor
    - simulator
    - tools help
    - Exam 1
    - debugger
    - bomb
    - 'char*'
    - fchat
    - Exam 2
    - args and inputs
    - sockets
    - [cpp, stl]



reading:

    shell:
        txt: at-home lab description
        lnk: lab00-ssh-ed.html
    git and information theory:
        txt: in-lab description
        lnk: lab01-git-infotheory.html
    hex editor:
        txt: in-lab description
        lnk: lab02-hex-editor.html
    simulator:
        txt: in-lab description
        lnk: lab03-simulator.html
    tools help:
        txt: in-lab description
        lnk: lab04-tools.html
    debugger:
        txt: in-lab description
        lnk: lab05-debugger.html
    bomb:
        txt: in-lab description
        lnk: lab06-bomb.html
    'char*':
        txt: in-lab description
        lnk: lab07-char*.html
    'fchat':
        txt: in-lab description
        lnk: lab08-fchat.html
    'args and inputs':
        txt: in-lab description
        lnk: lab09-args-input.html
    'sockets':
        txt: in-lab description
        lnk: lab09-sockets.html
    cpp:
        txt: in-lab description
        lnk: lab10-cpp.html
    stl:
        txt: in-lab description
        lnk: lab11-stl.html
        
    
    Review:
        txt: topics list
        lnk: review.html
    Boolean algebra:
        txt: Booleans §1–2
        lnk: bool.html
    binary arithmetic: 
        txt: Bits §2.1–2.4
        lnk: bits.html
    gates, wires, bitwise: 
        txt: Booleans §4
        lnk: bool.html
    mux, demux, adder: 
        txt: Booleans §3
        lnk: bool.html
    clocks: 
        - txt: Parts §2–3
          lnk: parts.html
        - txt: d flip-flop
          lnk: http://www.falstad.com/circuit/e-edgedff.html
    other hardware: 
        txt: Parts §1–5
        lnk: parts.html
    addressing modes: 
      - txt: ISA §3.3
        lnk: isa.html
    endianness:
      - txt: Bits §1–3
        lnk: bits.html
    
    von Neumann model; state: 
        txt: ISA §1–3
        lnk: isa.html
    fetch-decode-execute: 
        txt: ISA §1–3
        lnk: isa.html
    moves, memory, ALU ops: 
        txt: ISA §3.1
        lnk: isa.html
    conditional jump; back doors: 
        txt: ISA §3.4
        lnk: isa.html
    the stack: 
        txt: ISA §3.4.2
        lnk: isa.html
    compilation:
        txt: Compilation
        lnk: compile-ex.html
    
    review: 
        txt: review page
        lnk: review.html

    x86-64: 
        txt: x86-64 summary
        lnk: x86.html
    debugger demo: 
        txt: debugger example
        lnk: cmdadd.html
    
    C introduction: 
        - txt: wikipedia
          lnk: https://en.wikipedia.org/wiki/C_syntax
        - txt: language reference
          lnk: c.html
    "global, stack, heap": 
        txt: memory writeup
        lnk: memory.html
    "malloc and free": 
        txt: memory writeup
        lnk: memory.html
    "memory errors": 
        txt: memory writeup §6
        lnk: memory.html#detecting-and-avoiding-bugs
    C std library conventions: 
        txt: writeup
        lnk: manpage.html
    function pointers: 
      - txt: example from wikipedia
        lnk: https://en.wikipedia.org/wiki/Function_pointer#Example_in_C
      - txt: C++ virtual functions
        lnk: vtable.html
    defensive programming: 
        txt: wikipedia
        lnk: https://en.wikipedia.org/wiki/Defensive_programming
    languages safer than C:
      - txt: rust
        lnk: https://en.wikipedia.org/wiki/Rust_(programming_language)
      - txt: rust-lang
        lnk: https://www.rust-lang.org/
      - txt: ownership
        lnk: https://doc.rust-lang.org/1.59.0/book/ch04-01-what-is-ownership.html
      - txt: borrowing
        lnk: https://doc.rust-lang.org/1.59.0/book/ch04-02-references-and-borrowing.html
      - txt: lifetimes
        lnk: https://doc.rust-lang.org/1.59.0/book/ch10-03-lifetime-syntax.html
    
    adjacency and pointers:
        - txt: Data
          lnk: structures.html

assignments:
    ".groups":
        HW:
            portion: "40"
            late-policy: [0.9, 0.8]
            total: 10
        Lab:
            portion: 10
            drop: 1
            rubric: {"kind":"percentage"}
            no-regrade: true
        Exam:
            portion: "40"
            rubric: {"kind":"percentage"}
            no-regrade: true
        Quiz:
            portion: "10"
            drop: 1
            duration: -1
            rubric: {"kind":"percentage"}
            link: https://kytos.cs.virginia.edu/cso1/quizzes/
            no-regrade: true

    HW01:
        title: bit fiddling
        link: pa01-bit fiddling.html
        due: 2022-02-09 23:59:59
        notes: things like "count the number of set bits in an int" using limited numbers of bitwise operations
        rubric: {"kind":"percentage"}
    HW02:
        title: worksheet
        due: 2022-02-11 13:50:00
        link: pa02-worksheet.html
        total: 100
        late-policy: []
        no-regrade: true
    HW03:
        title: mult
        link: pa03-mult.html
        files: ['mult.binary', 'mult.binary.txt']
        due: 2022-02-16 23:59:59
    HW04:
        title: fib
        link: pa04-fib.html
        files: ['fib.binary', 'fib.binary.txt']
        due: 2022-03-02 23:59:59
    HW05:
        title: assembly
        files: 'matlib.s'
        link: pa05-assembly.html
        due: 2022-03-16 23:59:59
        rubric:
            kind: hybrid
            auto-weight: 0
            late-penalty: 1
            auto-late-days: 0
            human:
                - 'submitted'
                - 'assembles'
                - 'runs'
                - 'product should not use imul'
                - 'product is iterative'
                - 'product does not call functions'
                - {name: 'product works', weight: 3}
                - 'power should not use imul'
                - 'power is recursive'
                - 'power calls product (only)'
                - {name: 'power works', weight: 3}
    HW06:
        title: 'bomb'
        link: pa06-bomb.html
        due: 2022-03-23 23:59:59
    HW07:
        title: smallc
        files: smallfunc.c
        link: pa07-smallc.html
        due: 2022-03-30 23:59:59
        rubric:
            kind: hybrid
            auto-weight: 0
            late-penalty: 1
            auto-late-days: 0
            human:
                - 1st correct function
                - 2nd correct function
                - 3rd correct function
                - 4th correct function
                - 5th correct function

    HW08:
        title: linkedlist
        files: linkedlist.c
        link: pa08-linkedlist.html
        due: 2022-04-13 23:59:59
        rubric: {"kind":"percentage"}
    HW09:
        title: postfix
        files: rpn.c
        link: pa09-postfix.html
        due: 2022-04-27 23:59:59
    HW10:
        title: schat
        files: schat.c
        link: pa10-schat.html
        due: 2022-05-03 23:59:59
        rubric:
            kind: hybrid
            auto-weight: 0
            late-penalty: 1
            auto-late-days: 0
            human:
                - Added to lab code
                - Compiles
                - Server runs
                - Client runs
                - Some kind of chat works
                - name: Chat works properly
                  weight: 2
                - name: code uses socket, stdin, and poll
                  weight: 2
                - ends when end-of-file or Ctrl+C reached
    Quiz00:
        due: 2022-01-24 11:00:00
        weight: 0
    Quiz01:
        due: 2022-01-31 11:00:00
        open: 2022-01-28 17:00:00
    Quiz02:
        due: 2022-02-07 11:00:00
        open: 2022-02-04 17:00:00
    Quiz03:
        due: 2022-02-14 11:00:00
        open: 2022-02-11 17:00:00
    Quiz04:
        due: 2022-02-21 11:00:00
        open: 2022-02-18 17:00:00
    Quiz05:
        due: 2022-03-14 11:00:00
        open: 2022-03-11 17:00:00
    Quiz06:
        due: 2022-03-21 11:00:00
        open: 2022-03-18 17:00:00
    Quiz07:
        due: 2022-03-28 11:00:00
        open: 2022-03-25 17:00:00
    Quiz08:
        due: 2022-04-04 11:00:00
        open: 2022-04-01 17:00:00
    Quiz09:
        due: 2022-04-18 11:00:00
        open: 2022-04-15 17:00:00
    Quiz10:
        due: 2022-04-25 11:00:00
        open: 2022-04-22 17:00:00

    Exam 1:
        open: 2022-02-24 17:00:00
        due: 2022-02-24 20:45:00
        link: review.html
    Exam 2:
        open: 2022-04-07 17:00:00
        due: 2022-04-07 20:45:00
        link: review.html
      
    Lab01:
        due: 2022-01-27 20:45:00
    Lab02:
        due: 2022-02-03 20:45:00
    Lab03:
        due: 2022-02-10 20:45:00
    Lab04:
        due: 2022-02-17 20:45:00

    Lab05:
        due: 2022-03-03 20:45:00
    Lab06:
        due: 2022-03-17 20:45:00
    Lab07:
        due: 2022-03-24 20:45:00
    Lab08:
        due: 2022-03-31 20:45:00

    Lab09:
        due: 2022-04-14 20:45:00
    Lab10:
        due: 2022-04-21 20:45:00
    Lab11:
        due: 2022-04-28 20:45:00

    Exam 3:
        open: 2022-05-09 09:00:00
        due: 2022-05-09 17:00:00
        weight: 1.6
        link: review.html
