Special Dates:
  Courses begin: 2022-01-19
  Courses end: 2022-05-03
  Add deadline: 2022-09-10
  Drop deadline: 2022-10-15
  Withdraw deadline: 2022-10-22
  Spring recess:
    start: 2022-03-05
    end: 2022-03-13
  Final exams:
    CS2130-001: 2022-05-09 14:00:00
    CS2130-002: 2022-05-09 09:00:00

meta:
  timezone: America/New_York
  name: CSO1
  home: https://kytos.cs.virginia.edu/cso1/
  lecture:
    days: [Monday, Wednesday, Friday]
    duration: 50
    sections:
      CS2130-001:
        start: 13:00:00
        location: Nau 101
      CS2130-002:
        start: 12:00:00
        location: Olsson 120
  lab:
    days: [Thursday]
    duration: 75
    sections:
      CS2130-101:
        start: 17:00:00
        location: Rice 130
      CS2130-102:
        start: 18:30:00
        location: Rice 130

lectures:
    - welcome
    - Boolean algebra
    - binary arithmetic
    - binary arithmetic

    - gates, wires, bitwise
    - mux, demux, adder
    - clocks
    - other hardware

    - flex day
    - moves, memory, ALU ops
    - fetch-decode-execute
    - writing machine code
    - conditional jump

    - [addressing modes, endianness]
    - [adjacency, pointers, back doors]
    - review 
    
    - [assembly, x86-64]
    - x86-64
    - [the stack, tracing variables]

    - SIGCSE
    - SIGCSE
    - compilation

    - compile-time info
    - C introduction
    - C introduction
    - C introduction
    - C introduction
    - global, stack, heap
    - malloc and free
    - malloc examples

    - review
    
    - C std library conventions
    - string.h
    - stdio.h and varargs
    - stdio.h and varargs
    - unistd.h and so on

    - flex day

    - buffer overrun; reporting exploits
    - function pointers
    - defensive programming

    - languages safer than C
    - ask me anything
    
    - review


labs: 
    - shell
    - git and information theory
    - hex editor
    - simulator
    - tools help
    - Exam 1
    - debugger
    - bomb
    - 'char*'
    - fchat
    - Exam 2
    - sockets
    - cpp
    - stl



reading:

    shell:
        txt: at-home lab description
        lnk: lab00-ssh-ed.html
    git and information theory:
        txt: in-lab description
        lnk: lab01-git-infotheory.html
    hex editor:
        txt: in-lab description
        lnk: lab02-hex-editor.html
    simulator:
        txt: in-lab description
        lnk: lab03-simulator.html
    tools help:
        txt: in-lab description
        lnk: lab04-tools.html
    debugger:
        txt: in-lab description
        lnk: lab05-debugger.html
    bomb:
        txt: in-lab description
        lnk: lab06-bomb.html
    'char*':
        txt: in-lab description
        lnk: lab07-char*.html
    'fchat':
        txt: in-lab description
        lnk: lab08-fchat.html
    'sockets':
        txt: in-lab description
        lnk: lab09-sockets.html
    cpp:
        txt: in-lab description
        lnk: lab10-cpp.html
    stl:
        txt: in-lab description
        lnk: lab11-stl.html
        
    
    Review:
        txt: topics list
        lnk: review.html
    Boolean algebra:
        txt: Booleans §1–2
        lnk: bool.html
    binary arithmetic: 
        txt: Bits §2.1–2.4
        lnk: bits.html
    gates, wires, bitwise: 
        txt: Booleans §1–2, 4
        lnk: bool.html
    mux, demux, adder: 
        txt: Booleans §3
        lnk: bool.html
    clocks: 
        - txt: Parts §2–3
          lnk: parts.html
        - txt: d flip-flop
          lnk: //www.falstad.com/circuit/e-edgedff.html
    other hardware: 
        txt: Parts §1–5
        lnk: parts.html
    addressing modes: 
      - txt: ISA §3.3
        lnk: isa.html
    endianness:
      - txt: Bits §1–3
        lnk: bits.html
    
    von Neumann model; state: 
        txt: ISA §1–3
        lnk: isa.html
    fetch-decode-execute: 
        txt: ISA §1–3
        lnk: isa.html
    moves, memory, ALU ops: 
        txt: ISA §3.1
        lnk: isa.html
    conditional jump; back doors: 
        txt: ISA §3.4
        lnk: isa.html
    the stack: 
        txt: ISA §3.4.2
        lnk: isa.html
    
    review: 
        txt: review page
        lnk: review.html

    x86-64: 
        txt: x86-64 summary
        lnk: x86.html
    tracing variables: 
        txt: debugger example
        lnk: cmdadd.html
    
    C introduction: 
        - txt: wikipedia
          lnk: https://en.wikipedia.org/wiki/C_syntax
        - txt: language reference
          lnk: c.html
    "global, stack, heap": 
        txt: memory writeup
        lnk: memory.html
    "malloc and free": 
        txt: memory writeup
        lnk: memory.html
    C std library conventions: 
        txt: writeup
        lnk: manpage.html
    function pointers: 
      - txt: example from wikipedia
        lnk: https://en.wikipedia.org/wiki/Function_pointer#Example_in_C
      - txt: C++ virtual functions
        lnk: vtable.html
    defensive programming: 
        txt: wikipedia
        lnk: https://en.wikipedia.org/wiki/Defensive_programming
    languages safer than C:
      - txt: rust
        lnk: https://en.wikipedia.org/wiki/Rust_(programming_language)
      - txt: rust-lang
        lnk: https://www.rust-lang.org/
      - txt: ownership
        lnk: https://doc.rust-lang.org/1.8.0/book/ownership.html
      - txt: borrowing
        lnk: https://doc.rust-lang.org/1.8.0/book/references-and-borrowing.html
      - txt: lifetimes
        lnk: https://doc.rust-lang.org/1.8.0/book/lifetimes.html

assignments:
    ".groups":
        PA:
            portion: "40"
            late-policy: [0.9, 0.8]
            total: 10
        Lab:
            portion: 10
            drop: 1
            rubric: {"kind":"percentage"}
        Exam:
            portion: "40"
            rubric: {"kind":"percentage"}
        Quiz:
            portion: "10"
            drop: 1
            duration: -1
            rubric: {"kind":"percentage"}
            link: https://kytos.cs.virginia.edu/coa1/quizzes/

    PA01:
        title: bit fiddling
        link: pa01-bit fiddling.html
        due: 2022-09-17 17:00:00
        notes: things like "count the number of set bits in an int" using limited numbers of bitwise operations
        rubric: {"kind":"percentage"}
    PA02:
        title: worksheet
        due: 2022-09-20 13:50:00
        link: pa02-worksheet.html
        total: 100
        late-policy: []
        rubric:
            kind: hybrid
            auto-weight: 0
            late-penalty: 1
            auto-late-days: 0
            human:
                - name: 'pg1 basic gates (no muxes in answer)'
                  weight: 1
                - name: 'pg1 wired like a mux'
                  weight: 2
                - name: 'pg1 correct use of nots'
                  weight: 2
                - name: 'pg2 neat and readable'
                  weight: 1
                - name: 'pg2 shifts right'
                  weight: 2
                - name: 'pg2 sign extends'
                  weight: 2
    PA03:
        title: mult
        link: pa03-mult.html
        files: ['mult.binary', 'mult.binary.txt']
        due: 2022-10-12 17:00:00
    PA04:
        title: fib
        link: pa04-fib.html
        files: ['fib.binary', 'fib.binary.txt']
        due: 2022-10-01 17:00:00
    PA05:
        title: assembly
        files: 'matlib.s'
        link: pa05-assembly.html
        due: 2022-10-15 17:00:00
        rubric:
            kind: hybrid
            auto-weight: 0
            late-penalty: 1
            auto-late-days: 0
            human:
                - 'submitted'
                - 'assembles'
                - 'runs'
                - 'product should not use imul'
                - 'product is iterative'
                - 'product does not call functions'
                - {name: 'product works', weight: 3}
                - 'power should not use imul'
                - 'power is recursive'
                - 'power calls product (only)'
                - {name: 'power works', weight: 3}
    PA06:
        title: 'bomb'
        link: pa06-bomb.html
        due: 2022-10-22 17:00:00
    PA07:
        title: smallc
        files: smallfunc.c
        link: pa07-smallc.html
        due: 2022-10-29 17:00:00
        rubric:
            kind: hybrid
            auto-weight: 0
            late-penalty: 1
            auto-late-days: 0
            human:
                - 1st correct function
                - 2nd correct function
                - 3rd correct function
                - 4th correct function
                - 5th correct function

    PA08:
        title: linkedlist
        files: linkedlist.c
        link: pa08-linkedlist.html
        due: 2022-11-12 17:00:00
        rubric: {"kind":"percentage"}
    PA09:
        title: postfix
        files: rpn.c
        link: pa09-postfix.html
        due: 2022-11-26 17:00:00
    PA10:
        title: schat
        files: schat.c
        link: pa10-schat.html
        due: 2022-12-06 17:00:00
        rubric:
            kind: hybrid
            auto-weight: 0
            late-penalty: 1
            auto-late-days: 0
            human:
                - Added to lab code
                - Compiles
                - Server runs
                - Client runs
                - Some kind of chat works
                - name: Chat works properly
                  weight: 2
                - name: code uses socket, stdin, and poll
                  weight: 2
                - ends when end-of-file or Ctrl+C reached
    Quiz00:
        due: 2022-09-02 13:00:00
        weight: 0
    Quiz01:
        due: 2022-09-09 11:00:00
        open: 2022-09-06 17:00:00
    Quiz02:
        due: 2022-09-16 11:00:00
        open: 2022-09-13 17:00:00
    Quiz03:
        due: 2022-09-23 11:00:00
        open: 2022-09-20 17:00:00
    Quiz04:
        due: 2022-09-30 11:00:00
        open: 2022-09-27 17:00:00
    Quiz05:
        due: 2022-10-14 11:00:00
        open: 2022-10-11 17:00:00
    Quiz06:
        due: 2022-10-21 11:00:00
        open: 2022-10-18 17:00:00
    Quiz07:
        due: 2022-10-28 11:00:00
        open: 2022-10-25 17:00:00
    Quiz09:
        due: 2022-11-18 11:00:00
        open: 2022-11-15 17:00:00
    Quiz10:
        due: 2022-11-25 11:00:00
        open: 2022-11-22 17:00:00

    Exam 1:
        open: 2022-10-02 17:00:00
        due: 2022-10-03 18:15:00
        link: review.html
    
    Exam 1-wrapper:
        open: 2022-10-16 17:00:00
        due: 2022-10-25 17:00:00
        link: exam-wrapper.html
        files: exam1wrapper.txt
        weight: 0.2

    Exam 2:
        open: 2022-11-06 17:00:00
        due: 2022-11-07 18:15:00
        link: review.html

    Exam 2-wrapper:
        open: 2022-11-19 10:00:00
        due: 2022-11-26 17:00:00
        link: exam-wrapper.html
        files: exam2wrapper.txt
        weight: 0.2
        wraps: Exam 2
        
      
    Lab01:
        due: 2022-09-05 19:00:00
        open: 2022-09-04 17:00:00
    Lab02:
        due: 2022-09-12 19:00:00
        open: 2022-09-11 17:00:00
    Lab03:
        due: 2022-09-19 19:00:00
        open: 2022-09-18 17:00:00
    Lab04:
        due: 2022-09-26 19:00:00
        open: 2022-09-25 17:00:00

    Lab05:
        due: 2022-10-10 19:00:00
        open: 2022-10-09 17:00:00
    Lab06:
        due: 2022-10-17 19:00:00
        open: 2022-10-16 17:00:00
    Lab07:
        due: 2022-10-24 19:00:00
        open: 2022-10-23 17:00:00
    Lab08:
        due: 2022-10-31 19:00:00
        open: 2022-10-30 17:00:00

    Lab09:
        due: 2022-11-14 19:00:00
        open: 2022-11-13 17:00:00
    Lab10:
        due: 2022-11-21 19:00:00
        open: 2022-11-20 17:00:00
    Lab11:
        due: 2022-12-05 19:00:00
        open: 2022-12-04 17:00:00


    Exam 3:
        open: 2022-12-14 09:00:00
        due: 2022-12-14 12:00:00
        weight: 1.6
        link: review.html
